import Web3 from 'web3';
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useWallet } from '../../components/Header/Wallet';
import "./Landing.css";
import Logo from "../../Resources/logo.png";

function Landing() {
    const [web3, setWeb3] = useState(null);
    const [walletConnected, setWalletConnected] = useState(false);
    const [chainId, setChainId] = useState(null);
    const navigate = useNavigate();
    const location = useLocation();
    const { account, setAccount } = useWallet();

    useEffect(() => {
        const searchParams = new URLSearchParams(location.search);
        const disconnected = searchParams.get('disconnected');

        if (!disconnected) {
            initWeb3();
        }
    }, [location.search]);

    useEffect(() => {
        if (walletConnected && account && chainId === 1) {
            navigate('/home');
        }
    }, [walletConnected, account, chainId, navigate]);

    async function initWeb3() {
        if (window.ethereum) {
            const web3Instance = new Web3(window.ethereum);
            setWeb3(web3Instance);

            window.ethereum.on('accountsChanged', async () => {
                await initialise(web3Instance);
            });

            window.ethereum.on('chainChanged', async () => {
                await checkNetwork(web3Instance);
            });

            await initialise(web3Instance);
        }
    }

    function isMetaMaskInstalled() {
        return Boolean(window.ethereum && window.ethereum.isMetaMask);
    }

    async function isMetaMaskConnected(web3Instance) {
        if (!web3Instance) {
            console.error('Web3 instance is not initialized');
            return;
        }

        const { ethereum } = window;
        try {
            const accounts = await ethereum.request({ method: 'eth_accounts' });
            if (accounts.length > 0) {
                setAccount(accounts[0]);
                setWalletConnected(true);
                await checkNetwork(web3Instance);
            }
        } catch (error) {
            console.error('Failed to get accounts', error);
        }
    }

    async function initialise(web3Instance) {
        const installed = isMetaMaskInstalled();
        if (installed) {
            await isMetaMaskConnected(web3Instance);
        }
    }

    const handleConnectMetaMask = async () => {
        try {
            if (!window.ethereum.selectedAddress) {
                await window.ethereum.enable();
                const web3Instance = web3;
                if (web3Instance) {
                    console.log('Connecting to MetaMask');
                    const accounts = await web3Instance.eth.getAccounts();
                    setAccount(accounts[0]);
                    setWalletConnected(true);
                    const currentChainId = await web3Instance.eth.getChainId();
                    setChainId(Number(currentChainId));
                    
                    if (Number(currentChainId) === 1) {
                        navigate('/home');
                    } else {
                        await switchToEthereumMainnet();
                    }
                }
            }else{
                navigate('/home');
            }
        } catch (error) {
            console.error('Failed to connect MetaMask', error);
            if (!isMetaMaskInstalled()) {
                window.open('https://chromewebstore.google.com/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn', '_blank');
            }
        }
    };

    const checkNetwork = async (web3Instance) => {
        if (!web3Instance) {
            console.error('Web3 instance is not initialized');
            return false;
        }

        try {
            const currentChainId = await web3Instance.eth.getChainId();
            setChainId(Number(currentChainId));
            if (Number(currentChainId) !== 1) { // 1 is the chain ID for the Ethereum mainnet
                await switchToEthereumMainnet();
                return false;
            }
            return true;
        } catch (error) {
            console.error('Failed to check network', error);
            return false;
        }
    };

    const switchToEthereumMainnet = async () => {
        try {
            await window.ethereum.request({
                method: 'wallet_switchEthereumChain',
                params: [{ chainId: '0x1' }], // 0x1 is the chain ID for the Ethereum mainnet in hexadecimal
            });
        } catch (switchError) {
            if (switchError.code === 4902) {
                console.error('This network is not available in MetaMask, please add it manually');
            } else {
                console.error('Failed to switch network', switchError);
            }
        }
    };

    return (
        <div className="container">
            <img src={Logo} alt="logo" />
            <button onClick={handleConnectMetaMask}>
                Start AIditing 👨🏽‍💻
            </button>
        </div>
    );
}

export default Landing;
