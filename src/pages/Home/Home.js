import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useWallet } from '../../components/Header/Wallet';
import Header from '../../components/Header/Header';
import './Home.css';

function Home() {
  const [file, setFile] = useState(null);
  const [fileName, setFileName] = useState('');
  const [result, setResult] = useState('');
  const [error, setError] = useState(''); // Add error state
  const [isLoading, setIsLoading] = useState(false); // Add isLoading state
  const navigate = useNavigate();
  const { setAccount } = useWallet();

  useEffect(() => {
    const fetchSelectedAddress = async () => {
      try {
        const selectedAddress = await window.ethereum.request({
          method: 'eth_requestAccounts',
        });
        if (selectedAddress && selectedAddress.length > 0) {
          setAccount(selectedAddress[0]);
        } else {
          navigate('/');
        }
      } catch (error) {
        console.error(error);
        navigate('/');
      }
    };

    fetchSelectedAddress();
  }, [navigate, setAccount]);

  const handleSubmit = async (event) => {
    event.preventDefault();

    if (file) {
      const fileContent = await readFileContent(file);
      try {
        setIsLoading(true); // Set isLoading to true before making the request
        const response = await fetch('http://localhost:5000/analyze', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ content: fileContent }),
        });

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(errorText);
        }

        const data = await response.json();
        setResult(data);
        setError(''); // Clear any previous errors
      } catch (error) {
        setError(error.message);
        setResult(''); // Clear any previous results
      } finally {
        setIsLoading(false); // Set isLoading to false after receiving the response
      }
    }
  };

  const handleFileChange = (event) => {
    try {
      setResult('');
      setError(''); // Clear any previous errors
      const selectedFile = event.target.files[0];
      if (selectedFile) {
        setFile(selectedFile);
        setFileName(selectedFile.name);
      }
    } catch (error) {
      console.error(error);
    }
  };

  const readFileContent = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (event) => {
        resolve(event.target.result);
      };
      reader.onerror = (error) => {
        reject(error);
      };
      reader.readAsText(file);
    });
  };

  return (
    <div>
      <Header />
      <form onSubmit={handleSubmit} className='main-content'>
        <div className='inputWrapper'>
          <input
            type="file"
            accept=".sol"
            name="solidity file"
            className="fileInput" 
            onChange={handleFileChange}
          />
          + Upload File
        </div>
        {fileName && <p>Selected file: {fileName}</p>}
        {isLoading ? (
          <p>Loading...</p> 
        ) : (
          result && !result.error && (
            <table>
              <thead>
                <tr>
                  <th>Algorithm</th>
                  <th>Result</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>FeedForward Neural Network</td>
                  <td>{result.fnn_prediction === 0 ? 'Safe' : 'Unsafe'}</td>
                </tr>
                <tr>
                  <td>Back Propagation Neural Network</td>
                  <td>{result.bpnn_prediction === 0 ? 'Safe' : 'Unsafe'}</td>
                </tr>
                <tr>
                  <td>Random Forest</td>
                  <td>{result.rf_prediction === 0 ? 'Safe' : 'Unsafe'}</td>
                </tr>
              </tbody>
            </table>

          )
        )}
        {error && (
          <p className="error-message">Error: {error}</p>
        )}
        <button type="submit" className='form-submit-button'>Submit</button>
      </form>
    </div>
  );
}

export default Home;
